/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab4;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class Bitmap {
    public boolean someLibraryMethod() {
        return true;




    }

    String inputPathImage;
    String outputPathFolder;
    String newImageName;

    BufferedImage image = null ;

    public Bitmap(String inputPathImage , String outputPathFolder , String newImageName) throws IOException{

        this.inputPathImage = inputPathImage;
        this.outputPathFolder = outputPathFolder;
        this.newImageName = newImageName ;

        try {
            this.image = ImageIO.read(new File(inputPathImage));

        } catch (IOException ioException) {
            System.out.println(ioException);
        }
    }

public void savedImage(BufferedImage newImg) throws IOException {
        try {
            File output = new File(this.outputPathFolder + "/" + newImageName + ".bmp");
            System.out.println(output);
            ImageIO.write(newImg, "bmp" , output);

        }catch (IOException ioException){
            System.out.println(ioException);
        }
}


    public BufferedImage transformGrey() throws IOException {
        BufferedImage grey = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
        Graphics modifications = grey.getGraphics();
        modifications.drawImage(this.image, 0, 0, null);
        modifications.dispose();
        this.savedImage(grey);
        return grey;
    }
    public void reverseImageHorizontally() throws IOException {
        for (int i = 0; i < this.image.getHeight() / 2; i++) {
            for (int j = 0; j < this.image.getWidth(); j++) {
                int temp = this.image.getRGB(i, j);
                this.image.setRGB(i, j, this.image.getRGB(this.image.getWidth() - i - 1, j));
                this.image.setRGB(this.image.getWidth() - i - 1, j, temp);
            }
        }
        this.savedImage(image);
    }
    public void reverseImageVertically() throws IOException {

        for (int i = 0; i < this.image.getWidth(); i++) {
            for (int j = 0; j < this.image.getHeight() / 2; j++) {
                int temp = this.image.getRGB(i, j);
                this.image.setRGB(i, j, this.image.getRGB(i, this.image.getHeight() - j - 1));
                this.image.setRGB(i, this.image.getHeight() - j - 1, temp);
            }
        }
        this.savedImage(image);
    }







}
